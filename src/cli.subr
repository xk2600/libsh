#!/bin/sh


#
# source eval
#
#       evaluate source of file
#
# NOTE: NOT_IMPLEMENTED
#
# read command
#   read fragments: encap found, then push onto stack
#     identify encapsulation
#       pile onto stack
#         found leaf: eval leaf, next
#
# or convert to RPN. STACK:
#   push args
#   push command
#
# so during eval:
#   loop:
#    pop args
#    pop command
#    eval
#   goto loop

#
# interp sh source GLOB [...GLOB]
#
#       evaluates the resultant files in the current shell interpreter
#
interp::sh::source() {
  local _FD
  local _FILE
  local _FILES

  _FD="${1:?source: must provide file or descriptor as argument}"

  # validate
  for FILE in "$@"; do

    # Must not be a directory
    if [ -d "${_FD}" ]; then
      printf 'source: %s is a directory, and must be an executable file.' "$f" >&2
      return 1
    fi

    # Must be executable
    if [ ! -x "${_FD}" ]l then
      printf 'source: cannot open %s: No such file or execute bit is not set.' "$f" >&2
    fi

    _FILES="$_FILES '$FILE'"
  done

  for FILE in "${_FILES}"; do
    . "$FILE"
  done
}





#
# isolates the next full command line across possibly multiple lines in a file
# or where multiple commands may exist within a line
#
# logic:
#
#    find line characters whic delay evaluation: ({'"\
source::next() {
  local _TOKEN
  local _ENCAP
  local _QUOTE
  while read -r _TOKEN; do
    if [ ! -z "_QUOTE" ]; then
      case "${TOKEN}" in
        *[$_]*)

      esac
    else
      case "${TOKEN}" in
        [{])  ;;
        [(])  ;;
        ['])  ;;
        ["])  ;;
        [\*])  
  
      esac
    fi
  done
}




#
# source::chomp "DELIMS" "INPUT" VARNAME DELIMVAR
#
# inputs is always a single line at a time
# 
# returns left of ANY first delimiter, the delimeter,
# and updates the right.
#
source::chomp() {

  # arguments
  local DELIMS
  local STRING
  local VARNAME
  local DELIMVAR

  [ $# -eq 4 ] || error "source::linechomp: wrong number of arguments"
  DELIMS="${1:?}"
  STRING="${2:?}"
  VARNAME="${3:?}"
  DELIMVAR="${4:?}"

  # local procedure
  local _LEFT
  local _DELIM
  local _RIGHT
 
  LEFT="${STRING%%$DELIMS*}"      ;# store everything up until a char in DELIMS
  STRING="${STRING#$LEFT}"        ;# remove matched LEFT prefix from STRING
  DELIM="${LINE%%[^$DELIMS]*}"    ;# remove longest suffix (except prefix DELIMS match)
  STRING="${STRING#[^$DELIMS]*}"  ;# remove prefix DELIMS match

}

source::read::heredoc() {
}


source::read::line() {
  local _LINE
  __source_readline_OFS=$IFS
  while IFS="\n" read -r _LINE; do
    case "$_LINE" in

      *[{(]) ;;
      # line continuation
       *[\]) continue ;;
    esac
  done
  IFS=$__source_readline_OFS
  unset $__source_readline_OFS
}

__init__() {

  local _SEARCHPREFIX
  local _HOME
  local _PATH

  _HOME="\"${HOME}/.local/lib\""
  _SEARCHPREFIX="${_HOME} /usr/local/lib /usr/lib /opt"

  if [ -d "./cli/lib/cli" ]; then
    # we are sitting in the repo source root...
    # use static path for testing...
    CLILIB="./cli/lib/cli"
  else
    for _PATH in $_SEARCHPREFIX ; do
      if [ -d "${_PATH}/cli" ] ; then
        echo ${_PATH}/cli
        CLILIB="${_PATH}/cli"
        break
      fi
    done
  fi

  echo CLILIB: ${CLILIB:?}
  export CLILIB
}
__init__ ; __init__() { echo "__init__ previously ran." >&2 ; }



##
## istrue     VARNAME
## checkyesno VARNANE
##       test varname for truth, returning 1 else 0
##
## error      MESSAGE
## log        MESSAGE
##       allow output to stderr and logging to system log
##
## enable     INTERPOP
## disable    INTERPOP
##       enables or disables optional interpreter option
##
## ARGUMENTS
##
##       VARNAME             name of variable
##       NAMESPACE           command namespace
##       MESSAGE             message to be output

# istrue var
#
#       Test $1 variable, and warn if not set to YES or NO.
#       Return 0 if it's "yes" (et al), nonzero otherwise.
#
istrue() {
  eval _value=\$${1}
  debug "checkyesno: $1 is set to $_value."
  case $_value in

    #  "yes", "true", "on", or "1"
    [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
      return 0
      ;;

    #  "no", "false", "off", or "0"
    [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0)
      return 1
      ;;

    *)
      warn "\$${1} is not set properly - see rc.conf(5)."
      return 1
      ;;

  esac
}
alias checkyesno=istrue
debug func $LINENO function 'istrue() defined. (checkyesno)'





# error message [var [...var]]
#
#       outputs message to stderr and returns an error.
#
# ARGUMENTS
#
#       message
#             message to be output (printf format string)
#
#       var
#             variables to be replaced in message
#
# SIDE EFFECTS
#
#       with 'set -e' active, this will terminate the pipeline
#
error() {
  local MESSAGE
  local VARS

  MESSAGE=${1:?}
  # wrap vars in quotes
  while [ $# -gt 0 ]; do
    VARS="$VARS \"$1\"" ; shift
  done
  printf "$MESSAGE" $VARS >&2
  return 1
}
debug func $LINENO function 'error() defined.'



# log message
#
#       outputs message to stderr
#
# ARGUMENTS
#
#       message
#             message to be output (printf format string)
#
#       var
#             variables to be replaced in message
#
# SIDE EFFECTS
#
#       with 'set -e' active, this will terminate the pipeline
#
log() {
  local MESSAGE
  local VARS

  MESSAGE=${1:?}
  # wrap vars in quotes
  while [ $# -gt 0 ]; do
    VARS="$VARS \"$1\"" ; shift
  done
  printf "$MESSAGE" $VARS >&2
}
debug func $LINENO function 'log() defined.'




#
# enable
#
#       enables an interpreter option
#
enable() {
  local OPTION=$1
  # check to see if ${OPTION}::stator exists
  # execute ${OPTION}::stator enable if it does.
}
debug func $LINENO function 'enable() defined.'

#
# disable
#
#       disables an interpreter option
#
disable() {
  local OPTION=$1
  # check to see if ${OPTION}::stator exists
  # execute ${OPTION}::stator disable if it does.
}
debug func $LINENO function 'disable() defined.'


#
# wrap [arg [...arg]]
#
#       wraps a list of arguments in double quotes
#
wrap() {
  local ARGS=`printf "\"%s\" " "$@"`   ;# wraps each argument in ticks (')
  echo "${ARGS%?}"                   ;# removes the last space
}
debug func $LINENO function 'disable() defined.'



#
# usage
#
#       prints usage information
#
usage() {
  OFS=$IFS
  IFS="\n"
  for f in $@; do
    echo 'usage: $@' >&2
  done
  IFS=OFS
  return 1
}
debug func $LINENO function 'usage() defined.'



. ${CLILIB}/command
. ${CLILIB}/debug
. ${CLILIB}/doc
. ${CLILIB}/meta
. ${CLILIB}/package

# vim:syntax=sh
